// Code generated by MockGen. DO NOT EDIT.
// Source: CrackHash/manager/internal/service (interfaces: WorkerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "CrackHash/manager/internal/types"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkerClient is a mock of WorkerClient interface.
type MockWorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerClientMockRecorder
}

// MockWorkerClientMockRecorder is the mock recorder for MockWorkerClient.
type MockWorkerClientMockRecorder struct {
	mock *MockWorkerClient
}

// NewMockWorkerClient creates a new mock instance.
func NewMockWorkerClient(ctrl *gomock.Controller) *MockWorkerClient {
	mock := &MockWorkerClient{ctrl: ctrl}
	mock.recorder = &MockWorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerClient) EXPECT() *MockWorkerClientMockRecorder {
	return m.recorder
}

// SendTask mocks base method.
func (m *MockWorkerClient) SendTask(arg0 context.Context, arg1 types.CrackHashManagerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTask indicates an expected call of SendTask.
func (mr *MockWorkerClientMockRecorder) SendTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTask", reflect.TypeOf((*MockWorkerClient)(nil).SendTask), arg0, arg1)
}
