// Code generated by MockGen. DO NOT EDIT.
// Source: CrackHash/worker/internal/handlers (interfaces: WorkerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// ProcessTask mocks base method.
func (m *MockWorkerService) ProcessTask(arg0 string, arg1 int, arg2 []string, arg3, arg4 int) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTask", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ProcessTask indicates an expected call of ProcessTask.
func (mr *MockWorkerServiceMockRecorder) ProcessTask(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTask", reflect.TypeOf((*MockWorkerService)(nil).ProcessTask), arg0, arg1, arg2, arg3, arg4)
}
